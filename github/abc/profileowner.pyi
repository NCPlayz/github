from typing import Optional, Union

from github.iterator import CollectionIterator
from github.enums import PinnableItemType
from github.objects import Gist
from github.objects import Repository


class ProfileOwner():
    @property
    def has_pinnable_items(self) -> bool: ...
    @property
    def has_pinned_items(self) -> bool: ...
    @property
    def location(self) -> Optional[str]: ...
    @property
    def name(self) -> Optional[str]: ...
    @property
    def pinned_items_remaining_count(self) -> int: ...
    @property
    def twitter_username(self) -> Optional[str]: ...
    @property
    def viewer_can_change_pinned_items(self) -> bool: ...
    @property
    def website(self) -> Optional[str]: ...

    async def fetch_email(self) -> Optional[str]: ...
    # TODO?: async def fetch_has_pinnable_items(self, *, type: PinnableItemType=...) -> bool: ...

    def fetch_showcase_items(self, **kwargs) -> CollectionIterator[Union[Gist, Repository]]: ...
    def fetch_pinnable_items(
        self, *, types: List[PinnableItemType]=..., **kwargs
    ) -> CollectionIterator[Union[Gist, Repository]]: ...
    def fetch_pinned_items(
        self, *, types: List[PinnableItemType]=..., **kwargs
    ) -> CollectionIterator[Union[Gist, Repository]]: ...

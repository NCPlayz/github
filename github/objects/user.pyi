from typing import List, Optional, overload

from datetime import datetime

from github.iterator import CollectionIterator
from github.abc import Actor
from github.abc import Node
from github.abc import ProfileOwner
from github.abc import ProjectOwner
from github.abc import RepositoryOwner
from github.abc import Sponsorable
from github.abc import Type
from github.abc import UniformResourceLocatable
from github.objects import CommitComment
from github.objects import Organization
from github.objects import Status


class User(Actor, Node, ProfileOwner, ProjectOwner, RepositoryOwner,
           Sponsorable, Type, UniformResourceLocatable):
    @property
    def bio(self) -> str: ...
    @property
    def company(self) -> Optional[str]: ...
    @property
    def created_at(self) -> datetime: ...
    @property
    def database_id(self) -> int: ...
    @property
    def is_bounty_hunter(self) -> bool: ...
    @property
    def is_campus_expert(self) -> bool: ...
    @property
    def is_developer_program_member(self) -> bool: ...
    @property
    def is_employee(self) -> bool: ...
    @property
    def is_hireable(self) -> bool: ...
    @property
    def is_site_administrator(self) -> bool: ...
    @property
    def is_viewer(self) -> bool: ...
    @property
    def updated_at(self) -> Optional[datetime]: ...
    @property
    def viewer_can_follow(self) -> bool: ...
    @property
    def viewer_is_following(self) -> bool: ...

    def fetch_commit_comments(self, **kwargs) -> CollectionIterator: ...
    def fetch_followers(self, **kwargs) -> CollectionIterator: ...
    def fetch_following(self, **kwargs) -> CollectionIterator: ...

class AuthenticatedUser(User):
    async def clear_status(self) -> None: ...
    @overload
    async def update_status(self, *, message: str, busy: bool=..., expires: datetime=..., organization: Organization=...) -> Status: ...
    @overload
    async def update_status(self, *, emoji: str, busy: bool=..., expires: datetime=..., organization: Organization=...) -> Status: ...
    @overload
    async def update_status(self, *, message: str, emoji: str, busy: bool=..., expires: datetime=..., organization: Organization=...) -> Status: ...
